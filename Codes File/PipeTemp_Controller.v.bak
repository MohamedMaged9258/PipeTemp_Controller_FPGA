

// module CountdownTimer (
//   input Clock,
//   input Reset,
//   output reg Done
// );

// parameter PERIOD = 15 * 60;

// reg [31:0] counter;

// always @(posedge Clock) begin
//   if (Reset) begin
//     counter <= PERIOD;
//     Done <= 1'b0;
//   end else begin
//     if (counter == 0) begin
//       Done <= 1'b1;
//     end else begin
//       counter <= counter - 1'b1;
//       Done <= 1'b0;
//     end
//   end
// end
// endmodule

module PipeTemp_Controller (
    input Clock,
    input Reset,
    input [7:0] Temp_Data,
    output reg Alarm,
    output reg Shutdown,
    output reg Done,
    output [6:0] units_seconds_segment_leds,
    output [6:0] tens_seconds_segment_leds,
    output [6:0] units_minutes_segment_leds,
    output [6:0] tens_minutes_segment_leds
);

  localparam IState = 2'b00;
  localparam NORMAL = 2'b01;
  localparam ALARM = 2'b10;
  localparam SHUTDOWN = 2'b11;

  reg [1:0] Current_State, Next_State;

  parameter PERIOD = 15 * 60;

  reg [31:0] counter;

  reg [ 3:0] minutes;
  reg [ 5:0] seconds;

  reg [3:0] minutes_tens, minutes_units;
  reg [3:0] seconds_tens, seconds_units;

  decoder_7seg decoder_seconds_units (
      .A(seconds_units[3]),
      .B(seconds_units[2]),
      .C(seconds_units[1]),
      .D(seconds_units[0]),
      .led_a(units_seconds_segment_leds[6]),
      .led_b(units_seconds_segment_leds[5]),
      .led_c(units_seconds_segment_leds[4]),
      .led_d(units_seconds_segment_leds[3]),
      .led_e(units_seconds_segment_leds[2]),
      .led_f(units_seconds_segment_leds[1]),
      .led_g(units_seconds_segment_leds[0])
  );

  decoder_7seg decoder_seconds_tens (
      .A(seconds_tens[3]),
      .B(seconds_tens[2]),
      .C(seconds_tens[1]),
      .D(seconds_tens[0]),
      .led_a(tens_seconds_segment_leds[6]),
      .led_b(tens_seconds_segment_leds[5]),
      .led_c(tens_seconds_segment_leds[4]),
      .led_d(tens_seconds_segment_leds[3]),
      .led_e(tens_seconds_segment_leds[2]),
      .led_f(tens_seconds_segment_leds[1]),
      .led_g(tens_seconds_segment_leds[0])
  );

  decoder_7seg decoder_minutes_units (
      .A(minutes_units[3]),
      .B(minutes_units[2]),
      .C(minutes_units[1]),
      .D(minutes_units[0]),
      .led_a(units_minutes_segment_leds[6]),
      .led_b(units_minutes_segment_leds[5]),
      .led_c(units_minutes_segment_leds[4]),
      .led_d(units_minutes_segment_leds[3]),
      .led_e(units_minutes_segment_leds[2]),
      .led_f(units_minutes_segment_leds[1]),
      .led_g(units_minutes_segment_leds[0])
  );

  decoder_7seg decoder_minutes_tens (
      .A(minutes_tens[3]),
      .B(minutes_tens[2]),
      .C(minutes_tens[1]),
      .D(minutes_tens[0]),
      .led_a(tens_minutes_segment_leds[6]),
      .led_b(tens_minutes_segment_leds[5]),
      .led_c(tens_minutes_segment_leds[4]),
      .led_d(tens_minutes_segment_leds[3]),
      .led_e(tens_minutes_segment_leds[2]),
      .led_f(tens_minutes_segment_leds[1]),
      .led_g(tens_minutes_segment_leds[0])
  );

  always @ (posedge Clock or posedge Reset) begin
    if (Reset) begin
      counter <= PERIOD;
      seconds = counter % 60;
      minutes = counter / 60;
      Current_State <= IState;
      Alarm <= 1'b0;
      Shutdown <= 1'b0;
      Done <= 1'b0;
    end else begin
      if (counter == 0) begin
        Current_State <= Next_State;
        case (Current_State)
          IState: begin
            if (Temp_Data > 300) begin
              Next_State = SHUTDOWN;
            end else if (Temp_Data > 250) begin
              Next_State = ALARM;
            end else begin
              Next_State = NORMAL;
            end
            Alarm <= 1'b0;
            Shutdown <= 1'b0;
          end
          NORMAL: begin
            if (Temp_Data > 300) begin
              Next_State = SHUTDOWN;
            end else if (Temp_Data > 250) begin
              Next_State = ALARM;
            end else begin
              Next_State = NORMAL;
            end
            Alarm <= 1'b0;
            Shutdown <= 1'b0;
          end
          ALARM: begin
            Next_State = NORMAL;
            Alarm <= 1'b1;
            Shutdown <= 1'b0;
          end
          SHUTDOWN: begin
            Next_State = NORMAL;
            Alarm <= 1'b1;
            Shutdown <= 1'b1;
          end
        endcase
        Done <= 1'b1;
      end else begin
        seconds = counter % 60;
        minutes = counter / 60;
        if (minutes > 10) begin
          minutes_tens  = 1;
          minutes_units = minutes - 10;
        end else begin
          minutes_tens  = 0;
          minutes_units = minutes;
        end
        if (seconds > 50) begin
          seconds_tens  = 5;
          seconds_units = seconds - 50;
        end else if (seconds > 40) begin
          seconds_tens  = 4;
          seconds_units = seconds - 40;
        end else if (seconds > 30) begin
          seconds_tens  = 3;
          seconds_units = seconds - 30;
        end else if (seconds > 20) begin
          seconds_tens  = 2;
          seconds_units = seconds - 20;
        end else if (seconds > 10) begin
          seconds_tens  = 1;
          seconds_units = seconds - 10;
        end else begin
          seconds_tens  = 0;
          seconds_units = seconds;
        end
        counter <= counter - 1'b1;
        Done <= 1'b0;
      end
    end
  end

  // always @(posedge Clock, posedge Reset) begin
  //   if (Reset) begin
  //     Current_State <= IState;
  //     Alarm <= 1'b0;
  //     Shutdown <= 1'b0;
  //   end else begin
  //     Current_State <= Next_State;
  //     case (Current_State)
  //       IState: begin
  //         if (Temp_Data > 300) begin
  //           Next_State = SHUTDOWN;
  //         end else if (Temp_Data > 250) begin
  //           Next_State = ALARM;
  //         end else begin
  //           Next_State = NORMAL;
  //         end
  //         Alarm <= 1'b0;
  //         Shutdown <= 1'b0;
  //       end
  //       NORMAL: begin
  //         if (Temp_Data > 300) begin
  //           Next_State = SHUTDOWN;
  //         end else if (Temp_Data > 250) begin
  //           Next_State = ALARM;
  //         end else begin
  //           Next_State = NORMAL;
  //         end
  //         Alarm <= 1'b0;
  //         Shutdown <= 1'b0;
  //       end
  //       ALARM: begin
  //         Next_State = NORMAL;
  //         Alarm <= 1'b1;
  //         Shutdown <= 1'b0;
  //       end
  //       SHUTDOWN: begin
  //         Next_State = NORMAL;
  //         Alarm <= 1'b1;
  //         Shutdown <= 1'b1;
  //       end
  //     endcase
  // end
  // end

endmodule

module decoder_7seg (
    A,
    B,
    C,
    D,
    led_a,
    led_b,
    led_c,
    led_d,
    led_e,
    led_f,
    led_g
);

  input A, B, C, D;

  output led_a, led_b, led_c, led_d, led_e, led_f, led_g;

  assign led_a = ~(A | C | B & D | ~B & ~D);
  assign led_b = ~(~B | ~C & ~D | C & D);
  assign led_c = ~(B | ~C | D);
  assign led_d = ~(~B & ~D | C & ~D | B & ~C & D | ~B & C | A);
  assign led_e = ~(~B & ~D | C & ~D);
  assign led_f = ~(A | ~C & ~D | B & ~C | B & ~D);
  assign led_g = ~(A | B & ~C | ~B & C | C & ~D);

endmodule
